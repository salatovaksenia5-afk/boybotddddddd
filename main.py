from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import asyncio
import storage
import random

BOT_TOKEN = "8413897465:AAHOLQB_uKo0YVdOfqGtEq0jdjzHjj8C1-U"
OWNER_ID = 123456789  # —Ç–≤–æ–π Telegram ID
FRIEND_ID = 987654321  # –ù–∏–∫–∏—Ç–∞

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# ---------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ ----------
def _is_owner(user_id: int) -> bool:
    return user_id == OWNER_ID

# ---------- –ö–û–ú–ê–ù–î–´ ----------
@dp.message(Command("add_compliment"))
async def add_compliment(message: Message):
    if not _is_owner(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã.")
        return
    text = message.text.removeprefix("/add_compliment").strip()
    if not text:
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    storage.add_compliment(text)
    await message.answer(f"–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω:\n{text}")

@dp.message(Command("compliments"))
async def list_compliments(message: Message):
    if not _is_owner(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã.")
        return
    items = storage.get_compliments()
    if not items:
        await message.answer("–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    txt = "\n".join([f"‚Ä¢ {c}" for c in items])
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤:\n" + txt)

@dp.message(Command("set_reactions"))
async def set_reactions(message: Message):
    if not _is_owner(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–∞–∫—Ü–∏–∏.")
        return
    text = message.text.removeprefix("/set_reactions").strip()
    if not text:
        await message.answer("–ù–∞–ø–∏—à–∏ —Ä–µ–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: üëç,‚ù§Ô∏è,üî•")
        return
    reactions = [r.strip() for r in text.split(",") if r.strip()]
    storage.set_reactions(reactions)
    await message.answer(f"–†–µ–∞–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n{', '.join(reactions)}")

@dp.message(Command("reactions"))
async def show_reactions(message: Message):
    if not _is_owner(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∞–∫—Ü–∏–∏.")
        return
    reactions = storage.get_reactions()
    if not reactions:
        await message.answer("–†–µ–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    await message.answer("–¢–µ–∫—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏:\n" + ", ".join(reactions))

# ---------- –§–ê–ö–¢ –° –†–ï–ê–ö–¶–ò–Ø–ú–ò ----------
async def send_fact_with_reactions(fact: str):
    reactions = storage.get_reactions()
    if not reactions:
        reactions = ["üëç", "‚ù§Ô∏è", "üî•"]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=r, callback_data=f"react:{r}") for r in reactions]
        ]
    )
    await bot.send_message(FRIEND_ID, fact, reply_markup=keyboard)

@dp.callback_query(F.filter(lambda c: c.data.startswith("react:")))
async def handle_reaction(callback: CallbackQuery):
    reaction = callback.data.split(":", 1)[1]
    user_name = callback.from_user.full_name
    await bot.send_message(OWNER_ID, f"–ù–∏–∫–∏—Ç–∞ ({user_name}) –≤—ã–±—Ä–∞–ª —Ä–µ–∞–∫—Ü–∏—é: {reaction}")
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–∞–∫—Ü–∏—é!")

# ---------- –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ö–û–ú–ü–õ–ò–ú–ï–ù–¢ ----------
async def daily_compliment():
    while True:
        compliments = storage.get_compliments()
        if compliments:
            text = random.choice(compliments)
            await bot.send_message(FRIEND_ID, f"üíå –ù–∏–∫–∏—Ç–∞, {text}")
        await asyncio.sleep(24*60*60)  # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# ---------- –ó–ê–ü–£–°–ö ----------
async def main():
    asyncio.create_task(daily_compliment())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

