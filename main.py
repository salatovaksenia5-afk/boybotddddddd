import os
import re
import random
from datetime import datetime, date
from zoneinfo import ZoneInfo

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, Update, InlineKeyboardButton, InlineKeyboardMarkup

import storage

# === ENV ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "0"))     # —Ç—ã
FRIEND_ID = int(os.getenv("FRIEND_ID", "0"))   # –ù–∏–∫–∏—Ç–∞
WEBHOOK_URL = os.getenv("WEBHOOK_URL")         # https://<your-service>/webhook
TELEGRAM_WEBHOOK_SECRET = os.getenv("TELEGRAM_WEBHOOK_SECRET", "")  # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ
CRON_TOKEN = os.getenv("CRON_TOKEN", "")       # –∑–∞—â–∏—â–∞–µ—Ç /cron/compliment

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is required")

bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
app = FastAPI()

WARSAW = ZoneInfo("Europe/Warsaw")


COMPLIMENTS = [
    "–ù–∏–∫–∏—Ç–∞, —Ç—ã —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π. üöÄ",
    "–ù–∏–∫–∏—Ç–∞, —Ç—ã –ª—É—á—à–∏–π. –ù–µ –∑–∞–±—ã–≤–∞–π –æ–± —ç—Ç–æ–º. üí™",
    "–ù–∏–∫–∏—Ç–∞, —Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å. ‚ú®",
    "–ù–∏–∫–∏—Ç–∞, —Ç—ã –¥–µ–ª–∞–µ—à—å –º–∏—Ä –ª—É—á—à–µ. üôå",
    "–ù–∏–∫–∏—Ç–∞, —É —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è. üî•",
]

# === HELPERS ===
def _is_owner(user_id: int) -> bool:
    return OWNER_ID and user_id == OWNER_ID

def _is_friend(user_id: int) -> bool:
    return FRIEND_ID and user_id == FRIEND_ID

def _parse_fact(text: str) -> tuple[str, str] | None:
    # –§–æ—Ä–º–∞—Ç: "–ò–º—è: —Ç–µ–∫—Å—Ç —Ñ–∞–∫—Ç–∞"
    m = re.match(r"^\s*([^:]{1,50})\s*:\s*(.+)$", text.strip())
    if not m:
        return None
    subject, fact = m.group(1), m.group(2)
    return subject.strip(), fact.strip()

def _reaction_keyboard(fact_id: int) -> InlineKeyboardMarkup:
    buttons = []
    for r in storage.get_reactions():
        buttons.append(InlineKeyboardButton(text=r, callback_data=f"react:{fact_id}:{r}"))
    # –í –æ–¥–∏–Ω —Ä—è–¥ –ø–æ 3 –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    # aiogram —Å–∞–º –ø–µ—Ä–µ–Ω–µ—Å—ë—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

async def _send_fact_to_friend(subject: str, text: str, fact_id: int):
    msg = await bot.send_message(
        FRIEND_ID,
        f"<b>–ù–æ–≤—ã–π —Ñ–∞–∫—Ç –ø—Ä–æ {subject}</b>\n{text}\n\n–í—ã–±–µ—Ä–∏ —Ä–µ–∞–∫—Ü–∏—é:",
        reply_markup=_reaction_keyboard(fact_id)
    )
    storage.set_fact_sent(fact_id, FRIEND_ID, msg.message_id)

async def _notify_owner(text: str):
    if OWNER_ID:
        await bot.send_message(OWNER_ID, text)

# === HANDLERS ===
@dp.message(F.text == "/start")
async def start(message: Message):
    who = "–≤–ª–∞–¥–µ–ª–∏—Ü–∞" if _is_owner(message.from_user.id) else ("–¥—Ä—É–≥" if _is_friend(message.from_user.id) else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ñ–∞–∫—Ç–∞–º–∏ –∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞–º–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/myid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
        "/reactions ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏\n"
        "/set_reactions üî•,üòç,üëç ‚Äî (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–∏—Ü–∞) –∑–∞–¥–∞—Ç—å —Ä–µ–∞–∫—Ü–∏–∏\n"
        "/facts [–ò–º—è] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏:\n"
        "<code>–ò–º—è: —Å–∞–º —Ñ–∞–∫—Ç...</code>\n\n"
        f"–í—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –∫–∞–∫: {who}."
    )
@dp.message(F.text == "/compliments")
async def list_compliments(message: Message):
    if not _is_owner(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–∏—Ü–µ.")
        return
    items = storage.get_compliments()
    if not items:
        await message.answer("–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    txt = "\n".join([f"‚Ä¢ {c}" for c in items])
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è):\n" + txt)
   

@dp.message(F.text == "/myid")
async def myid(message: Message):
    await message.answer(f"–í–∞—à ID: <code>{message.from_user.id}</code>")

@dp.message(F.text.startswith("/reactions"))
async def reactions_show(message: Message):
    rs = storage.get_reactions()
    await message.answer("–¢–µ–∫—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: " + " ".join(rs))

@dp.message(F.text.startswith("/set_reactions"))
async def reactions_set(message: Message):
    if not _is_owner(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª–∏—Ü—ã.")
        return
    payload = message.text.removeprefix("/set_reactions").strip()
    if not payload:
        await message.answer("–§–æ—Ä–º–∞—Ç: /set_reactions üî•,üòç,üëç,ü§î")
        return
    # —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
    parts = [p.strip() for p in payload.split(",") if p.strip()]
    # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É callback_data (—Ç–µ–ª–µ–≥–∞ <=64 –±–∞–π—Ç), –Ω–æ —ç–º–æ–¥–∑–∏ –æ–∫
    if not parts:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ä–µ–∞–∫—Ü–∏–∏.")
        return
    storage.set_reactions(parts[:8])  # –º–∞–∫—Å–∏–º—É–º 8 –∫–Ω–æ–ø–æ–∫
    await message.answer("–ì–æ—Ç–æ–≤–æ. –ù–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏: " + " ".join(storage.get_reactions()))

@dp.message(F.text.startswith("/facts"))
async def facts_list(message: Message):
    parts = message.text.split(maxsplit=1)
    subject = parts[1].strip() if len(parts) > 1 else None
    facts = storage.list_facts(subject)
    if not facts:
        await message.answer("–§–∞–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    lines = []
    for f in facts[-30:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        tag = "‚úÖ" if f["status"] == "rated" else "üïò"
        react = f['reaction'] or "‚Äî"
        lines.append(f"{tag} #{f['id']} ¬´{f['subject']}¬ª: {f['text']}  [—Ä–µ–∞–∫—Ü–∏—è: {react}]")
    await message.answer("\n\n".join(lines))

@dp.message()
async def any_text(message: Message):
    # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–∏—Ü–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–∫—Ç—ã
    if not _is_owner(message.from_user.id):
        await message.answer("–Ø —Å–æ–±–∏—Ä–∞—é —Ñ–∞–∫—Ç—ã –æ—Ç –≤–ª–∞–¥–µ–ª–∏—Ü—ã –∏ —à–ª—é –∏—Ö –¥—Ä—É–≥—É —Å –∫–Ω–æ–ø–∫–∞–º–∏.")
        return
    parsed = _parse_fact(message.text or "")
    if not parsed:
        await message.answer("–§–æ—Ä–º–∞—Ç —Ñ–∞–∫—Ç–∞: <code>–ò–º—è: —Å–∞–º —Ñ–∞–∫—Ç...</code>")
        return
    subject, fact_text = parsed
    item = storage.add_fact(subject, fact_text)
    await message.answer(f"–§–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω (#{item['id']}) –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥—Ä—É–≥—É.")
    await _send_fact_to_friend(subject, fact_text, item["id"])

@dp.callback_query(F.data.startswith("react:"))
async def on_react(call: CallbackQuery):
    if not _is_friend(call.from_user.id):
        await call.answer("–≠—Ç–∏ —Ä–µ–∞–∫—Ü–∏–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥—Ä—É–≥—É.", show_alert=True)
        return
    try:
        _, sid, reaction = call.data.split(":", 2)
        fact_id = int(sid)
    except Exception:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    item = storage.set_fact_reaction(fact_id, reaction)
    if not item:
        await call.answer("–§–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –¥—Ä—É–≥–∞: —É–±–µ—Ä—ë–º –∫–Ω–æ–ø–∫–∏
    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await call.answer(f"–û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {reaction}")
    await _notify_owner(
        f"–ù–∏–∫–∏—Ç–∞ –æ—Ü–µ–Ω–∏–ª —Ñ–∞–∫—Ç #{item['id']} –ø—Ä–æ {item['subject']} ‚Äî <b>{reaction}</b>.\n"
        f"–¢–µ–∫—Å—Ç: {item['text']}"
    )

# === WEB ===
@app.get("/health")
async def health():
    return {"ok": True}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–µ–∫—Ä–µ—Ç, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    if TELEGRAM_WEBHOOK_SECRET:
        hdr = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
        if hdr != TELEGRAM_WEBHOOK_SECRET:
            raise HTTPException(status_code=401, detail="Bad secret")

    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return JSONResponse({"ok": True})

@app.get("/cron/compliment")
async def cron_compliment(token: str | None = None):
    if CRON_TOKEN and token != CRON_TOKEN:
        raise HTTPException(status_code=401, detail="Bad token")

    # –û—Ç–ø—Ä–∞–≤–∏–º 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å, –∫–æ–≥–¥–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ~12:00
    now = datetime.now(WARSAW)
    last = storage.get_last_compliment_date()
    today = date.today()

    if last == today.isoformat():
        return {"ok": True, "skipped": "already_sent_today"}

    if now.hour == 12:
        txt = random.choice(COMPLIMENTS)
        await bot.send_message(FRIEND_ID, txt)
        storage.set_last_compliment_date(today)
        return {"ok": True, "sent": True, "at": now.isoformat()}

    return {"ok": True, "skipped": f"hour_is_{now.hour}_not_12"}

# === STARTUP: —Å—Ç–∞–≤–∏–º webhook ===
@app.on_event("startup")
async def on_startup():
    if not WEBHOOK_URL:
        print("WARNING: WEBHOOK_URL is not set. Set it in env for production.")
        return
    await bot.set_webhook(
        url=WEBHOOK_URL,
        secret_token=TELEGRAM_WEBHOOK_SECRET or None,
        allowed_updates=["message", "callback_query"]
    )
    print("Webhook set to", WEBHOOK_URL)
