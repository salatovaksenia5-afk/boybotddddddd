import asyncio
import datetime
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

BOT_TOKEN = "8413897465:AAHOLQB_uKo0YVdOfqGtEq0jdjzHjj8C1-U"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ====== –î–∞–Ω–Ω—ã–µ ======
facts = {}  # {–∏–º—è_–ø–∞—Ä–Ω—è: [{"text": —Ñ–∞–∫—Ç, "reaction": None}]}
compliments = [ 
    "–¢—ã –æ—Ç–ª–∏—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫",
    "–≤—Å–µ —Ö—É–µ—Å–æ—Å—ã, —Ç—ã –æ–¥–∏–Ω —Ö–æ—Ä–æ—à–∏–π",
    "–¢—ã –æ—á–µ–Ω—å —É–º–Ω—ã–π –¥—è–¥—å–∫–∞",
    "–¢—ã –º–æ–π —Å–∞–º—ã–π –ª—É—á—à–∏–π –¥—Ä—É–≥ ‚ù§Ô∏è",
    "—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π!!"
]
reactions_list = ["–ø–∏–∑–¥–µ—Ü", "—Å—Ä–∞–∑—É –∑–∞–º—É–∂", "–Ω–æ—Ä–º", "–Ω–∏—á–µ", "–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ", "–ø—Ä–æ–º–æ–ª—á—É"]

# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞ ======
async def add_fact(subject: str, fact: str):
    if subject not in facts:
        facts[subject] = []
    facts[subject].append({"text": fact, "reaction": None})
    # –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –ù–∏–∫–∏—Ç—ã
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(text=r, callback_data=f"{subject}|{len(facts[subject])-1}|{r}") for r in reactions_list]
    keyboard.add(*buttons)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–∏–∫–∏—Ç–µ (–Ω—É–∂–µ–Ω –µ–≥–æ chat_id)
    nikita_chat_id = "—Ç—É—Ç_chat_id_–ù–∏–∫–∏—Ç—ã"
    await bot.send_message(chat_id=nikita_chat_id, text=f"–ù–æ–≤—ã–π —Ñ–∞–∫—Ç –ø—Ä–æ {subject}: {fact}", reply_markup=keyboard)

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –ù–∏–∫–∏—Ç—ã ======
@dp.callback_query()
async def reaction_handler(callback: types.CallbackQuery):
    data = callback.data.split("|")
    subject, index, reaction = data[0], int(data[1]), data[2]
    facts[subject][index]["reaction"] = reaction
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–±–µ
    your_chat_id = "—Ç—É—Ç_—Ç–≤–æ–π_chat_id"
    await bot.send_message(chat_id=your_chat_id, text=f"–ù–∏–∫–∏—Ç–∞ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ {subject}: {reaction}")
    await callback.answer("–†–µ–∞–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!")

# ====== –ü–æ–¥—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ ======
@dp.message(commands=["rating"])
async def rating_handler(message: types.Message):
    rating = {}
    for subject, items in facts.items():
        positive = 0
        negative = 0
        for item in items:
            if item["reaction"] in ["–ø–∏–∑–¥–µ—Ü", "—Å—Ä–∞–∑—É –∑–∞–º—É–∂", "–Ω–æ—Ä–º"]:
                positive += 1
            elif item["reaction"] in ["–Ω–∏—á–µ", "–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ", "–ø—Ä–æ–º–æ–ª—á—É"]:
                negative += 1
        rating[subject] = {"positive": positive, "negative": negative}
    text = "\n".join([f"{s}: üëç {v['positive']} | üëé {v['negative']}" for s,v in rating.items()])
    await message.answer(f"–†–µ–π—Ç–∏–Ω–≥ –ø–∞—Ä–Ω–µ–π:\n{text}")

# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É ======
@dp.message(commands=["addfact"])
async def addfact_command(message: types.Message):
    try:
        parts = message.text.split(maxsplit=2)
        subject, fact = parts[1], parts[2]
        await add_fact(subject, fact)
        await message.answer(f"–§–∞–∫—Ç –ø—Ä–æ {subject} –¥–æ–±–∞–≤–ª–µ–Ω!")
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addfact <–∏–º—è_–ø–∞—Ä–Ω—è> <—Ñ–∞–∫—Ç>")

# ====== –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ ======
async def send_compliment():
    comp = random.choice(compliments)
    nikita_chat_id = "—Ç—É—Ç_chat_id_–ù–∏–∫–∏—Ç—ã"
    await bot.send_message(chat_id=nikita_chat_id, text=comp)

# ====== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å ======
async def schedule_compliments():
    while True:
        now = datetime.datetime.now()
        if now.hour in [10, 18] and now.minute == 0:
            await send_compliment()
            await asyncio.sleep(60)
        await asyncio.sleep(10)

# ====== –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ======
async def main():
    await bot.delete_webhook()
    print("Webhook —É–¥–∞–ª—ë–Ω, —Å—Ç–∞—Ä—Ç—É–µ–º polling...")
    asyncio.create_task(schedule_compliments())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

  
